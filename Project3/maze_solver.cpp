#include "maze_solver.h"
#include <thread>
#include <chrono>
#include <algorithm>
#include <cctype>

using namespace std;

const int dr[4] = { -1, 1, 0, 0 };
const int dc[4] = { 0, 0, -1, 1 };
const char moveKeys[4] = { 'W', 'S', 'A', 'D' };

void clearScreen() {
#ifdef _WIN32
    system("CLS");
#else
    cout << "\033[2J\033[H";
#endif
}

void printMaze(const vector<vector<int>>& maze, pair<int, int> player, pair<int, int> end) {
    clearScreen();
    int n = maze.size(), m = maze[0].size();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (player.first == i && player.second == j) cout << "\033[1;32mP\033[0m";
            else if (end.first == i && end.second == j) cout << "\033[1;34mE\033[0m";
            else if (maze[i][j] == 1) cout << "\033[1;31m#\033[0m";
            else cout << ".";
        }
        cout << '\n';
    }
    cout << "\nW: 위  S: 아래  A: 왼쪽  D: 오른쪽  Z: 뒤로가기\n";
}

vector<vector<vector<int>>> easyMazes = {
    {{0,0,1,0,0,0,1,0,0,0},{1,0,1,0,1,0,1,0,1,0},{1,0,0,0,1,0,0,0,1,0},{1,1,1,1,1,1,1,0,1,0},{0,0,0,0,0,0,1,0,1,0},{0,1,1,1,1,0,1,0,1,0},{0,0,0,0,1,0,1,0,1,0},{1,1,1,0,1,0,1,0,1,0},{0,0,0,0,1,0,0,0,0,0},{0,1,1,1,1,1,1,1,1,0}},
    {{0,1,1,0,0,0,0,0,0,0},{0,1,0,0,1,1,1,1,1,0},{0,0,0,1,1,0,0,0,1,0},{1,1,0,1,0,0,1,0,1,0},{0,0,0,1,0,1,1,0,1,0},{0,1,1,1,0,0,0,0,1,0},{0,0,0,0,0,1,1,1,1,0},{0,1,1,1,1,1,0,0,0,0},{0,0,0,0,0,0,0,1,1,0},{1,1,1,1,1,1,0,0,0,0}},
    {{0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,0},{0,0,0,0,0,0,0,0,1,0},{0,1,1,1,1,1,1,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,1,1,1,1,1,0},{0,0,0,1,0,0,0,0,0,0},{1,1,1,1,0,1,1,1,1,1},{0,0,0,0,0,1,0,0,0,0},{0,1,1,1,1,1,0,1,1,0}}
};

vector<vector<vector<int>>> mediumMazes = {
    {{0,0,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,0,0,0,1},{1,1,1,1,1,1,1,1,0,1},{1,0,0,0,0,0,0,1,0,1},{1,0,1,1,1,1,0,1,0,1},{1,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,1,0,1},{1,0,1,0,0,0,0,1,0,1},{1,0,1,1,1,1,1,1,0,1},{1,0,0,0,0,0,0,0,0,0}},
    {{0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,0},{0,0,0,0,0,0,0,0,1,0},{0,1,1,1,1,1,1,0,1,0},{0,1,0,0,0,0,1,0,1,0},{0,1,0,1,1,0,1,0,1,0},{0,1,0,1,0,0,1,0,1,0},{0,1,0,1,1,1,1,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,0,1,1,1,1,1,1,0}},
    {{0,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,0},{0,0,0,0,0,0,0,0,1,0},{0,1,1,1,1,1,1,0,1,0},{0,1,0,0,0,0,1,0,1,0},{0,1,0,1,1,0,1,0,1,0},{0,1,0,1,0,0,1,0,1,0},{0,1,0,1,1,1,1,0,1,0},{0,0,0,0,0,0,0,0,1,0}}
};

vector<vector<vector<int>>> hardMazes = {
    {{0,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,1},{1,1,1,1,1,1,1,1,0,1},{1,0,0,0,0,0,0,1,0,1},{1,0,1,1,1,1,0,1,0,1},{1,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,1,0,1},{1,0,1,0,0,0,0,1,0,1},{1,0,1,1,1,1,1,1,0,1},{1,0,0,0,0,0,0,0,0,0}},
    {{0,0,0,1,1,1,1,1,1,1},{1,1,0,1,0,0,0,0,0,1},{1,1,0,1,0,1,1,1,0,1},{1,1,0,1,0,1,0,0,0,1},{1,1,0,1,0,1,0,1,1,1},{1,1,0,1,0,1,0,1,0,0},{1,1,0,1,0,1,0,1,0,1},{1,1,0,0,0,1,0,1,0,1},{1,1,1,1,1,1,0,1,0,1},{1,1,1,1,1,1,0,0,0,0}},
    {{0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,0},{0,0,0,0,0,0,0,0,1,0},{0,1,1,1,1,1,1,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,1,1,1,1,1,0},{0,1,0,1,0,0,0,0,0,0},{0,1,0,1,0,1,1,1,1,1},{0,1,0,1,0,0,0,0,0,0},{0,0,0,0,0,1,1,1,1,0}}
};

vector<vector<int>> selectMaze(int level) {
    int index = rand() % 3;
    if (level == 1) return easyMazes[index];
    if (level == 2) return mediumMazes[index];
    return hardMazes[index];
}

void playMazeGame() {
    srand(time(0));
    pair<int, int> player = { 0, 0 };
    stack<pair<int, int>> history;
    int level = 0;

    cout << "\n미로 탐험 게임에 오신 것을 환영합니다!\n";
    cout << "당신은 미로에 갇힌 탐험가입니다. 탈출하려면 출구(E)까지 도달하세요!\n\n";
    cout << "[조작 방법 안내]\n";
    cout << "  W: 위로 이동\n";
    cout << "  S: 아래로 이동\n";
    cout << "  A: 왼쪽으로 이동\n";
    cout << "  D: 오른쪽으로 이동\n";
    cout << "  Z: 한 칸 뒤로가기\n\n";
    cout << "[모드 선택]\n";
    cout << "  1: 초보자 (쉬운 경로)\n";
    cout << "  2: 중급자 (보통 경로)\n";
    cout << "  3: 고급자 (복잡한 경로)\n\n";

    while (true) {
        cout << "원하는 난이도를 선택하세요 (1/2/3): ";
        cin >> level;
        if (level >= 1 && level <= 3) break;
        cout << "잘못된 입력입니다. 1, 2 또는 3을 입력하세요.\n";
    }

    vector<vector<int>> maze = selectMaze(level);
    pair<int, int> end = { maze.size() - 1, maze[0].size() - 1 };
    printMaze(maze, player, end);

    while (true) {
        char key = toupper(_getch());
        if (key == 'Z' && !history.empty()) {
            player = history.top(); history.pop();
        }
        else {
            for (int dir = 0; dir < 4; ++dir) {
                if (key == moveKeys[dir]) {
                    int nr = player.first + dr[dir];
                    int nc = player.second + dc[dir];
                    if (nr >= 0 && nr < maze.size() && nc >= 0 && nc < maze[0].size() && maze[nr][nc] == 0) {
                        history.push(player);
                        player = { nr, nc };
                    }
                }
            }
        }
        printMaze(maze, player, end);
        if (player == end) {
            cout << "\n축하합니다! 출구에 도착했습니다!\n";
            break;
        }
    }
}
